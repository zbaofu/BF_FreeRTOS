/*!
* \file list.h
* \brief 链表定义头文件
* 
*详细概述 
* 
* \author zbaofu
* \version V1.1
* \date 20230811 
*
*/

#ifndef LIST_H
#define LIST_H

#include "portmacro.h"

// 链表节点数据结构定义
struct xLIST_ITEM{
	TickType_t xItemValue;  // 辅助值，用于帮助节点排序
	struct xLIST_ITEM *pxNext; // 指向链表的下一个节点
	struct xLIST_ITEM *pxPrevious; // 指向链表的前一个节点
	void *pvOwner; // 指向拥有该节点的内核对象，通常是TCB
  void *pvContainer; // 指向该节点所在的链表
};

typedef struct xLIST_ITEM ListItem_t; // 节点数据类型的重定义


/* 链表精简节点结构体定义 */
struct xMINI_LIST_ITEM{
	TickType_t xItemValue;  // 辅助值，用于帮助节点排序
	struct xLIST_ITEM *pxNext; // 指向链表的下一个节点
	struct xLIST_ITEM *pxPrevious; // 指向链表的前一个节点
};
typedef struct xMINI_LIST_ITEM MiniListItem_t;

/* 链表根节点数据结构定义 */
typedef struct xLIST{
	UBaseType_t uxNumberOfItems;  // 链表节点计数器，表示链表下有多少节点，根节点除外
	ListItem_t *pxIndex; // 链表节点索引指针，用于遍历节点
	MiniListItem_t xListEnd; // 链表的最后一个节点
}List_t;

/* 初始化节点的拥有者 */ 
#define listSET_LIST_ITEM_OWNER( pxListItem, pxOwner )   ( ( pxListItem )->pvOwner = ( void * ) ( pxOwner ) )

/* 获取节点拥有者 */
#define listGET_LIST_ITEM_OWNER(pxListItem)   ((pxListItem)->pvOwner)

/* 初始化节点排序辅助值 */
#define listSET_LIST_ITEM_VALUE( pxListItem, xValue )  ( ( pxListItem )->xItemValue = ( xValue ) )

/* 获取节点排序辅助值 */
#define listGET_LIST_ITEM_VALUE( pxListItem )   ( ( pxListItem )->xItemValue )

/* 获取链表根节点的节点计数器的值 */
#define listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxList )   ( ( ( pxList )->xListEnd ).pxNext->xItemValue )

/* 获取链表的入口节点 */
#define listGET_HEAD_ENTRY( pxList )    ( ( ( pxList )->xListEnd ).pxNext )

/* 获取节点下一个节点 */
#define listGET_NEXT( pxListItem )   ( ( pxListItem )->pxNext )

/* 获取链表的最后一个节点 */
#define listGET_END_MARKER( pxList )  ( ( ListItem_t const * ) ( &( ( pxList )->xListEnd ) ) )
	
/* 判断链表是否为空 */
#define listLIST_IS_EMPTY( pxList )   ( ( BaseType_t ) ( ( pxList )->uxNumberOfItems == ( UBaseType_t )0 ) )

/* 获取链表的节点数 */
#define listCURRENT_LIST_LENGTH(pxList) ((pxList)->uxNumberOfItems)

/* 获取链表第一个节点的owner，即TCB */
// 使用define定义一个多行的复杂函数，要在每一个换行处加上 "\"
#define listGET_OWNER_OF_NEXT_ENTRY( pxTCB, pxList )										\
{																							\
	List_t * const pxConstList = ( pxList );											    \
	/* 节点索引指向链表第一个节点调整节点索引指针，指向下一个节点，
    如果当前链表有N个节点，当第N次调用该函数时，pxInedex则指向第N个节点 */  \
	( pxConstList )->pxIndex = ( pxConstList )->pxIndex->pxNext;							\
	/* 当前链表为空 */                                                                       \
	if( ( void * ) ( pxConstList )->pxIndex == ( void * ) &( ( pxConstList )->xListEnd ) )	\
	{																						\
		( pxConstList )->pxIndex = ( pxConstList )->pxIndex->pxNext;						\
	}																						\
	/* 获取节点的OWNER，即TCB */                                                             \
	( pxTCB ) = ( pxConstList )->pxIndex->pvOwner;											 \
}

/* 链表节点初始化 */
void vListInitialiseItem(ListItem_t * const pxItem);
/* 链表根节点初始化 */
void vListInitialise(List_t *const pxList);
/* 将节点插入到链表的尾部根节点 */
void vListInsertEnd(List_t * const pxList,ListItem_t *const pxNewListItem);
/* 将节点按照升序排列插入到链表 */
void vListInsert(List_t *const pxList,ListItem_t *const pxNewListItem);
/* 将节点从链表删除 */
UBaseType_t uxListRemove(ListItem_t * const pxItemRemove);


#endif
